//=====================================================================================================================
// Общее название реализованной функциональности в файле или наборе файлов, к которым относится хедер - если есть
//---------------------------------------------------------------------------------------------------------------------
// Список ответственных, имена, адреса, явки, пароли - чтобы знать к кому обращаться при возникновении вопросов.
// Описание содержимого. Должно кратно отражать суть, в частности, что объединяет реализованные функции.
// В заголовке не надо перечислять, что делает каждая функция.
// Если в заголовке нет разумной необходимости - может отсутствовать.
// Если заголовок объединяет несколько .cpp файлов, их можно перечислить в заголовке
// пример оформления заголовка - cr_timer.h
//=====================================================================================================================

#ifndef GLOBAL_DATA_HEADER  //охранялка от повторного использования
#define GLOBAL_DATA_HEADER

// ! все имена файлов хедеров - строго строчными (маленькими) буквами ! 
#include "hdr.h" // хэдеры в хэдерах подключаем, только если они используются непосредственно в хедере!

//=====================================================================================================================
// декоративные отсечки использовать по вкусу из соображений эстетической целесообразности
// ===== - отсечка верхнего уровня, ----- - нижнего уровня. отсечки не выравниваем, делаем от начала строки. 
//---------------------------------------------------------------------------------------------------------------------

// не перемешиваем без необходимости директивы, декларации функций, классов, внешних данных. все по порядку!

//---------------------------------------------------------------------------------------------------------------------
// сначала идут директивы препроцессора
//---------------------------------------------------------------------------------------------------------------------
#define NDEF 100 // комментарий
#define SQR(X) (X*X)
#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)

// директивы препроцессора - выравниваем
// не требуется, но может быть полезен такой макрос для описания глобальных данных:
#ifdef GLOBAL_DATA // <- название блока глобальных данных 
// должно быть задефайнено в одном и только одном из файлов, к которым относится хедер 
    #define EXTERNAL
    #define DEFAULT(X) = X   // задает значение по умолчанию
#else
    #define EXTERNAL extern
    #define DEFAULT(X)  
#endif

//---------------------------------------------------------------------------------------------------------------------
// затем глобальные внешние данные базовых типов
//---------------------------------------------------------------------------------------------------------------------

// глобальные переменные можно описывать через макрос 
EXTERNAL int NnGlobal DEFAULT(0); // всенепременно коментарий 


// если хедер объединяет неск cpp файлов - группируем классы функции и прочие описания по файлам и указываем,
// к какому файлу они относятся.


//=== template.cpp ====================================================================================================

//---------------------------------------------------------------------------------------------------------------------
// затем глобальные внешние данные базовых типов, привязанные к конкретному файлу
//---------------------------------------------------------------------------------------------------------------------
 extern int varShared; //комментарий

//---------------------------------------------------------------------------------------------------------------------
// затем классы (после описаний классов могут быть глобальные внешние данные, связанные с типом этих классов)
//---------------------------------------------------------------------------------------------------------------------

class tWrong; // НЕ ДЕКЛАРИРОВАТЬ ПУСТЫЕ КЛАССЫ! подключать соответствующий хэдер.

class tTemp{ // краткое описание
// если надо - более подробное описание назначения 

// не перемешиваем разделы private, protected и public. 
// не перемешиваем методы и свойства. сначала декларим свойства, потом методы
// для объекта расчетной области - ознакомиться с работой макросов SETVAL 
// и использовть соответствующий подход для инициализации, присваивания, дампа. 

private:
    // декларации свойств
    double dvar; // комментарий
    double varx, vary, varz; // комментарий. логически связанная группа перменных - можно в одну срочку 
    double varv; // тип - в каждой строке. не переносим после запятой на новую строку. 
 
    double *p1, *p2; // комментарий
    
    vector <double> p3; // использование stl векторов в свойствах - избегать. использовать строго по необходимости!
    // не использовать под короткие локальные массивы, тем более если их размер задается при инициализации и 
    // не меняется в процессе счета. это безосновательно увеличивает размер структуры 

    //без необходимости не перемешиваем инты и даблы, не плодим дыры в выравнивании между свойствами
    int ivar; // комментарий

    char v;     // избегать целочисленных типов меньше инта! без необходимости не использовать. 
    bool logic; // без крайней необходимости не использовать. лучше все делать интами. 

    //декларации методов
    void func1(); // комментарий

protected:
    // декларации свойств
    int ivar2; // комментарий

    //декларации методов
    void func2(); // комментарий
    inline double GetX(){return varx;} // без необходимости не размещать тела методов в описании класса. 
    // возможное исключение - инлайновые интерфейсы для доступа к приватным свойствам

public: 
    // декларации свойств. свойства в разделе public - строго по необходимости! не портим эту как её инкапсуляцию.
    int ivar3; // комментарий. 

    //декларации методов
    void func3(); // комментарий
};

//---------------------------------------------------------------------------------------------------------------------
// затем функции 
//---------------------------------------------------------------------------------------------------------------------

void Func123(int a, int b); // в заголовках указываем имена параметров, не спользуем сокращенную форму Func123(int,int) 

//=====================================================================================================================


//=== template.cpp ====================================================================================================

void AllocNnArrays(); // краткое описание
void AllocNtArrays(); // краткое описание

//=====================================================================================================================

#undef EXTERNAL
#undef DEFAULT
#endif